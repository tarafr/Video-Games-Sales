import streamlit as st
import pandas as pd
from streamlit_option_menu import option_menu
from pathlib import Path
from apps import home, prediction

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –≤–∏–¥–µ–æ–∏–≥—Ä",
    page_icon="üéÆ",
    layout="wide",
    initial_sidebar_state="expanded",
)

@st.cache_data
def load_data(file_path):
    df = pd.read_csv(file_path, encoding = 'Latin-1')
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    df.dropna(inplace=True)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º —Ç–∏–ø–∞–º
    categorical_columns = [
        'Platform', 'Genre', 'Publisher',
    ]
    for column in categorical_columns:
        df[column] = df[column].astype('category')

    df['Year'] = df['Year'].astype(int)
    return df


class Menu:
    apps = [
        {
            "func": home.app,
            "title": "–ì–ª–∞–≤–Ω–∞—è",
            "icon": "house-fill"
        },
        {
            "func": prediction.app,
            "title": "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "icon": 'graph-up'
        },
    ]

    def run(self):
        with st.sidebar:
            titles = [app["title"] for app in self.apps]
            icons = [app["icon"] for app in self.apps]
            st.image('images/logo.webp', use_column_width='auto')

            selected = option_menu(
                "–ú–µ–Ω—é",
                options=titles,
                icons=icons,
                menu_icon="cast",
                default_index=0,
            )

            st.info("""
                ### –û–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
                –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º, –∏–∑–¥–∞—Ç–µ–ª—è–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º –≤ –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π. 
                –≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–≥—Ä, –ø–ª–∞—Ç—Ñ–æ—Ä–º, –∂–∞–Ω—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ –∏ –∏–∑–¥–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –≤–∏–¥–µ–æ–∏–≥—Ä.
                –°–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –≤—ã—è–≤–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö –∏–≥—Ä, —á—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç 
                –ø—Ä–∏–Ω—è—Ç–∏—é –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –≤–∏–¥–µ–æ–∏–≥—Ä.
            """)
        return selected


if __name__ == '__main__':
    current_dir = Path(__file__).parent if "__file__" in locals() else Path.cwd()
    df = load_data(current_dir / 'vgsales.csv')

    menu = Menu()
    selected = menu.run()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    st.sidebar.header('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–π–ª')
    uploaded_file = st.sidebar.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", type=["csv"])
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
    elif df is None:
        st.sidebar.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö.")

    for app in menu.apps:
        if app["title"] == selected:
            app["func"](df, current_dir)
            break
